"use strict";var t=require("./_virtual/_tslib.js"),e=require("./local.js"),i=require("./encryption.js"),s=require("./uuidv4.js"),n=require("./logger.js"),r=require("./decodeJwt.js");function o(){const t=e.getLocalId();return t||`${s()}-${s()}`}const a="_undefined_";class c{constructor(t,i={id:o(),class:a,autoUpdateOldEncryptedValues:!0,logLevel:"warn"}){this.class=a;let s={class:a,logLevel:"warn"};if("string"==typeof i?(this.id=i,s={class:a,logLevel:"warn"}):(this.id=i.id||o(),s=i),this.logger=n.default(s.logLevel),!t||"object"!=typeof t||"string"!=typeof t.apiKey||"string"!=typeof t.apiSecret||"string"!=typeof t.projectId)throw new Error("Invalid credentials!");e.setLocalId(this.id),this.credentials=t,this.class=s.class||a,s.passphrase&&(this.passphrase=s.passphrase),void 0===s.autoUpdateOldEncryptedValues&&(s.autoUpdateOldEncryptedValues=!0),this.autoUpdateOldEncryptedValues=s.autoUpdateOldEncryptedValues,s.idSignature&&(this.idSignature=s.idSignature),this.idSignature&&(this.idSignatureKeyVersion=s.idSignatureKeyVersion||0),this.isGettingAccessToken=this.getAccessToken(),this.isGettingAccessToken.finally((()=>{this.isGettingAccessToken=void 0}))}getAccessToken(){return t.__awaiter(this,void 0,void 0,(function*(){const t=yield this.request("GET","/auth/token"),e=r(t);this.accessToken=t;const i=e.payload.exp-Date.now();setTimeout((()=>this.getAccessToken()),i-12e4)}))}getSymKey(e){return t.__awaiter(this,void 0,void 0,(function*(){return i.deriveSymmetricKey(this.passphrase,this.id,e.salt)}))}getSymKeyForKeyVersion(e){return t.__awaiter(this,void 0,void 0,(function*(){if(e>-1&&(e!==this.encryptionSettings.keyVersion&&(this.previousEncryptionSettings&&0!==this.previousEncryptionSettings.length||(yield this.getEncryptionSettings())),e!==this.encryptionSettings.keyVersion)){if(!this.previousEncryptionSettings||0===this.previousEncryptionSettings.length)throw new Error(`Wrong keyVersion! Found ${e} but you're using ${this.encryptionSettings.keyVersion}`);let t=this.previousEncryptionSettings.find((t=>t.keyVersion===e));if(t||(yield this.getEncryptionSettings()),t=(this.previousEncryptionSettings||[]).find((t=>t.keyVersion===e)),!t)throw new Error(`Wrong keyVersion! Found ${e} but you're using ${this.encryptionSettings.keyVersion}`);return this.getSymKey(t)}return this.symKey}))}handleEncryptionSettings(e){return t.__awaiter(this,void 0,void 0,(function*(){var t,i;this.encryptionSettings={salt:Uint8Array.from(atob(null===(t=null==e?void 0:e.encryptionSettings)||void 0===t?void 0:t.salt),(t=>t.charCodeAt(0))),keyVersion:null===(i=null==e?void 0:e.encryptionSettings)||void 0===i?void 0:i.keyVersion},this.previousEncryptionSettings=((null==e?void 0:e.previousEncryptionSettings)||[]).map((t=>({salt:Uint8Array.from(atob(null==t?void 0:t.salt),(t=>t.charCodeAt(0))),keyVersion:null==t?void 0:t.keyVersion}))),this.symKey=yield this.getSymKey(this.encryptionSettings)}))}getEncryptionSettings(){return t.__awaiter(this,arguments,void 0,(function*(t=16){if(!this.passphrase)throw new Error("No passphrase passed! This function is only allowed with e2e encryption!");const e=yield this.request("POST",`/cache-encryption/${this.class}/${this.id}`,{saltLength:t});return this.handleEncryptionSettings(e)}))}rotateEncryption(){return t.__awaiter(this,arguments,void 0,(function*(t=16){if(!this.passphrase)throw new Error("No passphrase passed! This function is only allowed with e2e encryption!");const e=yield this.request("POST",`/cache-encryption-rotate/${this.class}/${this.id}`,{saltLength:t});return this.handleEncryptionSettings(e)}))}request(e,i,s){return t.__awaiter(this,void 0,void 0,(function*(){var t;!this.accessToken&&this.isGettingAccessToken&&(yield this.isGettingAccessToken);const n={Authorization:this.accessToken?`Bearer ${this.accessToken}`:`Basic ${btoa(`${this.credentials.apiKey}:${this.credentials.apiSecret}`)}`},r="string"==typeof s,o=null===(t=null==this?void 0:this.encryptionSettings)||void 0===t?void 0:t.keyVersion;void 0!==o&&o>-1&&(n["X-Enc-KV"]=o.toString()),this.idSignature&&void 0!==this.idSignatureKeyVersion&&(n["X-Id-Sig"]=this.idSignature,n["X-Id-Sig-KV"]=this.idSignatureKeyVersion.toString()),s&&(n["Content-Type"]=r?"text/plain":"application/json");const a=yield fetch(`${c.basePath}/project/${this.credentials.projectId}${i}`,{method:e,headers:n,body:s?r?s:JSON.stringify(s):void 0}),h=a.headers.get("content-type");let d;if(h)try{0===h.indexOf("text/plain")?d=yield a.text():0===h.indexOf("application/json")&&(d=yield a.json())}catch(t){d=`${a.status} - ${a.statusText}`}if(!a.ok){if("string"==typeof d)throw new Error(d);if(d)throw d;if(404!==a.status)throw new Error(`${a.status} - ${a.statusText}`)}return d}))}}c.basePath="http://localhost:5173",module.exports=c;
