"use strict";var t=require("./_virtual/_tslib.js"),i=require("./local.js"),e=require("./encryption.js"),s=require("./uuidv4.js"),n=require("./logger.js");function r(){const t=i.getLocalId();return t||`${s()}-${s()}`}const o="_undefined_";class a{constructor(t,e={id:r(),class:o,logLevel:"warn"}){this.class=o;let s={class:o,logLevel:"warn"};if("string"==typeof e?(this.id=e,s={class:o,logLevel:"warn"}):(this.id=e.id||r(),s=e),this.logger=n.default(s.logLevel),!t||"object"!=typeof t||"string"!=typeof t.apiKey||"string"!=typeof t.apiSecret||"string"!=typeof t.projectId)throw new Error("Invalid credentials!");i.setLocalId(this.id),this.credentials=t,this.class=s.class||o,s.passphrase&&(this.passphrase=s.passphrase),s.signedId&&(this.signedId=s.signedId),this.signedId&&(this.idSignatureKeyVersion=s.idSignatureKeyVersion||0)}getSymKey(i){return t.__awaiter(this,void 0,void 0,(function*(){return e.deriveSymmetricKey(this.passphrase,this.id,i.salt)}))}getSymKeyForKeyVersion(i){return t.__awaiter(this,void 0,void 0,(function*(){if(i>-1&&(i!==this.encryptionSettings.keyVersion&&(this.previousEncryptionSettings&&0!==this.previousEncryptionSettings.length||(yield this.getEncryptionSettings())),i!==this.encryptionSettings.keyVersion)){if(!this.previousEncryptionSettings||0===this.previousEncryptionSettings.length)throw new Error(`Wrong keyVersion! Found ${i} but you're using ${this.encryptionSettings.keyVersion}`);let t=this.previousEncryptionSettings.find((t=>t.keyVersion===i));if(t||(yield this.getEncryptionSettings()),t=(this.previousEncryptionSettings||[]).find((t=>t.keyVersion===i)),!t)throw new Error(`Wrong keyVersion! Found ${i} but you're using ${this.encryptionSettings.keyVersion}`);return this.getSymKey(t)}return this.symKey}))}handleEncryptionSettings(i){return t.__awaiter(this,void 0,void 0,(function*(){var t,e;this.encryptionSettings={salt:Uint8Array.from(atob(null===(t=null==i?void 0:i.encryptionSettings)||void 0===t?void 0:t.salt),(t=>t.charCodeAt(0))),keyVersion:null===(e=null==i?void 0:i.encryptionSettings)||void 0===e?void 0:e.keyVersion},this.previousEncryptionSettings=((null==i?void 0:i.previousEncryptionSettings)||[]).map((t=>({salt:Uint8Array.from(atob(null==t?void 0:t.salt),(t=>t.charCodeAt(0))),keyVersion:null==t?void 0:t.keyVersion}))),this.symKey=yield this.getSymKey(this.encryptionSettings)}))}getEncryptionSettings(){return t.__awaiter(this,arguments,void 0,(function*(t=16){if(!this.passphrase)throw new Error("No passphrase passed! This function is only allowed with e2e encryption!");const i=yield this.request("POST",`/cache-encryption/${this.class}/${this.id}`,{saltLength:t});return this.handleEncryptionSettings(i)}))}rotateEncryption(){return t.__awaiter(this,arguments,void 0,(function*(t=16){if(!this.passphrase)throw new Error("No passphrase passed! This function is only allowed with e2e encryption!");const i=yield this.request("POST",`/cache-encryption-rotate/${this.class}/${this.id}`,{saltLength:t});return this.handleEncryptionSettings(i)}))}request(i,e,s){return t.__awaiter(this,void 0,void 0,(function*(){var t;const n="string"==typeof s,r={Authorization:`Basic ${btoa(`${this.credentials.apiKey}:${this.credentials.apiSecret}`)}`},o=null===(t=null==this?void 0:this.encryptionSettings)||void 0===t?void 0:t.keyVersion;void 0!==o&&o>-1&&(r["X-Enc-KV"]=o.toString()),this.signedId&&void 0!==this.idSignatureKeyVersion&&(r["X-Id-Sig"]=this.signedId,r["X-Id-Sig-KV"]=this.idSignatureKeyVersion.toString()),s&&(r["Content-Type"]=n?"text/plain":"application/json");const h=yield fetch(`${a.basePath}/project/${this.credentials.projectId}${e}`,{method:i,headers:r,body:n?s:JSON.stringify(s)}),d=h.headers.get("content-type");let y;if(d)try{0===d.indexOf("text/plain")?y=yield h.text():0===d.indexOf("application/json")&&(y=yield h.json())}catch(t){y=`${h.status} - ${h.statusText}`}if(!h.ok){if("string"==typeof y)throw new Error(y);if(y)throw new Error(y.message)}return y}))}}a.basePath="http://localhost:5173",module.exports=a;
