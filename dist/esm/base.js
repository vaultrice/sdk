import{__awaiter as t}from"./_virtual/_tslib.js";import{setLocalId as i,getLocalId as e}from"./local.js";import{deriveSymmetricKey as s}from"./encryption.js";import n from"./uuidv4.js";import o from"./logger.js";import r from"./decodeJwt.js";function a(){const t=e();return t||`${n()}-${n()}`}const c="_undefined_";class d{constructor(t,e={id:a(),class:c,autoUpdateOldEncryptedValues:!0,logLevel:"warn"}){this.class=c;let s={class:c,logLevel:"warn"};if("string"==typeof e?(this.id=e,s={class:c,logLevel:"warn"}):(this.id=e.id||a(),s=e),this.logger=o(s.logLevel),!t||"object"!=typeof t||"string"!=typeof t.apiKey||"string"!=typeof t.apiSecret||"string"!=typeof t.projectId)throw new Error("Invalid credentials!");i(this.id),this.credentials=t,this.class=s.class||c,s.passphrase&&(this.passphrase=s.passphrase),void 0===s.autoUpdateOldEncryptedValues&&(s.autoUpdateOldEncryptedValues=!0),this.autoUpdateOldEncryptedValues=s.autoUpdateOldEncryptedValues,s.idSignature&&(this.idSignature=s.idSignature),this.idSignature&&(this.idSignatureKeyVersion=s.idSignatureKeyVersion||0),this.isGettingAccessToken=this.getAccessToken(),this.isGettingAccessToken.finally((()=>{this.isGettingAccessToken=void 0}))}getAccessToken(){return t(this,void 0,void 0,(function*(){const t=yield this.request("GET","/auth/token"),i=r(t);this.accessToken=t;const e=i.payload.exp-Date.now();setTimeout((()=>this.getAccessToken()),e-12e4)}))}getSymKey(i){return t(this,void 0,void 0,(function*(){return s(this.passphrase,this.id,i.salt)}))}getSymKeyForKeyVersion(i){return t(this,void 0,void 0,(function*(){if(i>-1&&(i!==this.encryptionSettings.keyVersion&&(this.previousEncryptionSettings&&0!==this.previousEncryptionSettings.length||(yield this.getEncryptionSettings())),i!==this.encryptionSettings.keyVersion)){if(!this.previousEncryptionSettings||0===this.previousEncryptionSettings.length)throw new Error(`Wrong keyVersion! Found ${i} but you're using ${this.encryptionSettings.keyVersion}`);let t=this.previousEncryptionSettings.find((t=>t.keyVersion===i));if(t||(yield this.getEncryptionSettings()),t=(this.previousEncryptionSettings||[]).find((t=>t.keyVersion===i)),!t)throw new Error(`Wrong keyVersion! Found ${i} but you're using ${this.encryptionSettings.keyVersion}`);return this.getSymKey(t)}return this.symKey}))}handleEncryptionSettings(i){return t(this,void 0,void 0,(function*(){var t,e,s;this.encryptionSettings={salt:Uint8Array.from(atob(null===(t=null==i?void 0:i.encryptionSettings)||void 0===t?void 0:t.salt),(t=>t.charCodeAt(0))),keyVersion:null===(e=null==i?void 0:i.encryptionSettings)||void 0===e?void 0:e.keyVersion,createdAt:null===(s=null==i?void 0:i.encryptionSettings)||void 0===s?void 0:s.createdAt},this.previousEncryptionSettings=((null==i?void 0:i.previousEncryptionSettings)||[]).map((t=>({salt:Uint8Array.from(atob(null==t?void 0:t.salt),(t=>t.charCodeAt(0))),keyVersion:null==t?void 0:t.keyVersion,createdAt:null==t?void 0:t.createdAt}))),this.symKey=yield this.getSymKey(this.encryptionSettings)}))}getEncryptionSettings(){return t(this,arguments,void 0,(function*(t=16){if(!this.passphrase)throw new Error("No passphrase passed! This function is only allowed with e2e encryption!");const i=yield this.request("POST",`/cache-encryption/${this.class}/${this.id}`,{saltLength:t});return this.handleEncryptionSettings(i)}))}rotateEncryption(){return t(this,arguments,void 0,(function*(t=16){if(!this.passphrase)throw new Error("No passphrase passed! This function is only allowed with e2e encryption!");const i=yield this.request("POST",`/cache-encryption-rotate/${this.class}/${this.id}`,{saltLength:t});return this.handleEncryptionSettings(i)}))}request(i,e,s){return t(this,void 0,void 0,(function*(){var t;!this.accessToken&&this.isGettingAccessToken&&(yield this.isGettingAccessToken);const n={Authorization:this.accessToken?`Bearer ${this.accessToken}`:`Basic ${btoa(`${this.credentials.apiKey}:${this.credentials.apiSecret}`)}`},o="string"==typeof s,r=null===(t=null==this?void 0:this.encryptionSettings)||void 0===t?void 0:t.keyVersion;void 0!==r&&r>-1&&(n["X-Enc-KV"]=r.toString()),this.idSignature&&void 0!==this.idSignatureKeyVersion&&(n["X-Id-Sig"]=this.idSignature,n["X-Id-Sig-KV"]=this.idSignatureKeyVersion.toString()),s&&(n["Content-Type"]=o?"text/plain":"application/json");const a=yield fetch(`${d.basePath}/project/${this.credentials.projectId}${e}`,{method:i,headers:n,body:s?o?s:JSON.stringify(s):void 0}),c=a.headers.get("content-type");let h;if(c)try{0===c.indexOf("text/plain")?h=yield a.text():0===c.indexOf("application/json")&&(h=yield a.json())}catch(t){h=`${a.status} - ${a.statusText}`}if(!a.ok){if("string"==typeof h)throw new Error(h);if(h)throw h;if(404!==a.status)throw new Error(`${a.status} - ${a.statusText}`)}return h}))}}d.basePath="http://localhost:5173";export{d as default};
