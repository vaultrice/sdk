import{__awaiter as e}from"./_virtual/_tslib.js";function t(t,r,n){return e(this,arguments,void 0,(function*(e,t,r,n=1e5,o={hash:"SHA-512",derivedKeyType:{name:"AES-GCM",length:256}}){const i=new TextEncoder,a=yield crypto.subtle.importKey("raw",i.encode(e+":"+t),"PBKDF2",!1,["deriveKey"]);return crypto.subtle.deriveKey({name:"PBKDF2",salt:r,iterations:n,hash:(null==o?void 0:o.hash)||"SHA-512"},a,(null==o?void 0:o.derivedKeyType)||{name:"AES-GCM",length:256},!1,["encrypt","decrypt"])}))}function r(t,r){return e(this,arguments,void 0,(function*(e,t,r={algorithm:"AES-GCM"}){const n=new TextEncoder,o=crypto.getRandomValues(new Uint8Array(12)),i=yield crypto.subtle.encrypt({name:(null==r?void 0:r.algorithm)||"AES-GCM",iv:o},e,n.encode(t));return JSON.stringify({iv:btoa(String.fromCharCode(...o)),data:btoa(String.fromCharCode(...new Uint8Array(i)))})}))}function n(t,r){return e(this,arguments,void 0,(function*(e,t,r={algorithm:"AES-GCM"}){const n=JSON.parse(t),o=new TextDecoder,i=Uint8Array.from(atob(n.iv),(e=>e.charCodeAt(0))),a=Uint8Array.from(atob(n.data),(e=>e.charCodeAt(0))),d=yield crypto.subtle.decrypt({name:(null==r?void 0:r.algorithm)||"AES-GCM",iv:i},e,a);return o.decode(d)}))}export{n as decrypt,t as deriveSymmetricKey,r as encrypt};
