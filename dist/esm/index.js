import{__awaiter as t}from"./_virtual/_tslib.js";import e from"./ws.js";class i extends e{constructor(t,e){"string"==typeof e?super(t,e):(super(t,e),(null==e?void 0:e.ttl)&&(this.ttl=null==e?void 0:e.ttl))}setItem(e,i,n){return t(this,void 0,void 0,(function*(){var t,r;if(!e)throw new Error("No name passed!");if(!i)throw new Error("No value passed!");if(this.getEncryptionHandler&&!this.encryptionHandler)throw new Error("Call getEncryptionSettings() first!");const s=(null==n?void 0:n.ttl)||this.ttl,o=this.encryptionHandler?yield this.encryptionHandler.encrypt(JSON.stringify(i)):i;let l;try{l=yield this.request("POST",`/cache/${this.class}/${this.id}/${e}`,{value:o,ttl:s})}catch(i){if(!i||"ConflictError"!==(null===(t=null==i?void 0:i.cause)||void 0===t?void 0:t.name))throw i;this.logger.log("warn","Your local keyVersion does not match! Will attempt to fetch the new encryption settings..."),yield this.getEncryptionSettings(),l=yield this.request("POST",`/cache/${this.class}/${this.id}/${e}`,{value:o,ttl:s})}const c=l;return{expiresAt:null==c?void 0:c.expiresAt,keyVersion:null!==(r=null==c?void 0:c.keyVersion)&&void 0!==r?r:void 0}}))}setItems(e){return t(this,void 0,void 0,(function*(){var t,i;if(!e||0===Object.keys(e).length)throw new Error("No items passed!");if(this.getEncryptionHandler&&!this.encryptionHandler)throw new Error("Call getEncryptionSettings() first!");for(const t of Object.keys(e)){const n=this.encryptionHandler?yield this.encryptionHandler.encrypt(JSON.stringify(e[t].value)):e[t].value;e[t].value=n,(i=e[t]).ttl||(i.ttl=this.ttl)}let n;try{n=yield this.request("POST",`/cache/${this.class}/${this.id}`,e)}catch(i){if(!i||"ConflictError"!==(null===(t=null==i?void 0:i.cause)||void 0===t?void 0:t.name))throw i;this.logger.log("warn","Your local keyVersion does not match! Will attempt to fetch the new encryption settings..."),yield this.getEncryptionSettings(),n=yield this.request("POST",`/cache/${this.class}/${this.id}`,e)}const r=n;return Object.keys(r).reduce(((t,e)=>{var i,n,s,o;return t[e]={expiresAt:null!==(n=null===(i=r[e])||void 0===i?void 0:i.expiresAt)&&void 0!==n?n:0,keyVersion:null!==(o=null===(s=r[e])||void 0===s?void 0:s.keyVersion)&&void 0!==o?o:void 0},t}),{})}))}getItem(e){return t(this,void 0,void 0,(function*(){var t,i;if(!e)throw new Error("No name passed!");if(this.getEncryptionHandler&&!this.encryptionHandler)throw new Error("Call getEncryptionSettings() first!");let n;try{n=yield this.request("GET",`/cache/${this.class}/${this.id}/${e}`)}catch(i){if(!i||"ConflictError"!==(null===(t=null==i?void 0:i.cause)||void 0===t?void 0:t.name))throw i;this.logger.log("warn","Your local keyVersion does not match! Will attempt to fetch the new encryption settings..."),yield this.getEncryptionSettings(),n=yield this.request("GET",`/cache/${this.class}/${this.id}/${e}`)}const r=n,s=null==r?void 0:r.value;if(!s)return;const o=yield this.getEncryptionHandlerForKeyVersion(r.keyVersion),l=o?JSON.parse(yield o.decrypt(s)):s;return(null==r?void 0:r.keyVersion)>-1&&r.keyVersion!==(null===(i=this.encryptionSettings)||void 0===i?void 0:i.keyVersion)&&(this.autoUpdateOldEncryptedValues?(this.logger.log("info",`Item "${e}" has an old encryption and will be automatically updated now by setting it again.`),yield this.setItem(e,l,{ttl:r.expiresAt-Date.now()})):this.logger.log("warn",`Item "${e}" has an old encryption and can be updated by setting it again.`)),{value:l,expiresAt:r.expiresAt,keyVersion:r.keyVersion}}))}getItems(e){return t(this,void 0,void 0,(function*(){var t,i;if(!e||0===e.length)throw new Error("No names passed!");if(this.getEncryptionHandler&&!this.encryptionHandler)throw new Error("Call getEncryptionSettings() first!");let n;try{n=yield this.request("POST",`/cache-query/${this.class}/${this.id}`,e)}catch(i){if(!i||"ConflictError"!==(null===(t=null==i?void 0:i.cause)||void 0===t?void 0:t.name))throw i;this.logger.log("warn","Your local keyVersion does not match! Will attempt to fetch the new encryption settings..."),yield this.getEncryptionSettings(),n=yield this.request("POST",`/cache-query/${this.class}/${this.id}`,e)}const r=n;if(0===Object.keys(r).length)return;const s={},o={};for(const t of Object.keys(r)){const e=r[t],n=null==e?void 0:e.value;if(!n)continue;const l=yield this.getEncryptionHandlerForKeyVersion(e.keyVersion),c=l?JSON.parse(yield l.decrypt(n)):n;(null==e?void 0:e.keyVersion)>-1&&e.keyVersion!==(null===(i=this.encryptionSettings)||void 0===i?void 0:i.keyVersion)&&(s[t]=e),o[t]={value:c,expiresAt:e.expiresAt,keyVersion:e.keyVersion}}const l=Object.keys(s);if(l.length>0)if(this.autoUpdateOldEncryptedValues){this.logger.log("info",`These items "${l.join(",")}" have an old encryption and will be automatically updated now by setting them again.`);const t=l.reduce(((t,e)=>(t[e]={value:o[e].value,ttl:s[e].expiresAt-Date.now()},t)),{});yield this.setItems(t)}else this.logger.log("warn",`These items "${l.join(",")}" have an old encryption and can be updated by setting them again.`);return o}))}getAllItems(e){return t(this,void 0,void 0,(function*(){var t,i;if(this.getEncryptionHandler&&!this.encryptionHandler)throw new Error("Call getEncryptionSettings() first!");let n;try{n=yield this.request("GET",`/cache/${this.class}/${this.id}${(null==e?void 0:e.prefix)?`?prefix=${null==e?void 0:e.prefix}`:""}`)}catch(i){if(!i||"ConflictError"!==(null===(t=null==i?void 0:i.cause)||void 0===t?void 0:t.name))throw i;this.logger.log("warn","Your local keyVersion does not match! Will attempt to fetch the new encryption settings..."),yield this.getEncryptionSettings(),n=yield this.request("GET",`/cache/${this.class}/${this.id}${(null==e?void 0:e.prefix)?`?prefix=${null==e?void 0:e.prefix}`:""}`)}const r=n;if(0===Object.keys(r).length)return;const s={};for(const t of Object.keys(r)){const e=r[t],n=null==e?void 0:e.value;if(!n)continue;const o=yield this.getEncryptionHandlerForKeyVersion(e.keyVersion),l=o?JSON.parse(yield o.decrypt(n)):n;s[t]={value:l,expiresAt:e.expiresAt,keyVersion:null!==(i=e.keyVersion)&&void 0!==i?i:void 0}}return s}))}getAllKeys(e){return t(this,void 0,void 0,(function*(){return yield this.request("GET",`/cache-keys/${this.class}/${this.id}${(null==e?void 0:e.prefix)?`?prefix=${null==e?void 0:e.prefix}`:""}`)}))}removeItem(e){return t(this,void 0,void 0,(function*(){if(!e)throw new Error("No name passed!");yield this.request("DELETE",`/cache/${this.class}/${this.id}/${e}`)}))}removeItems(e){return t(this,void 0,void 0,(function*(){if(!e||0===e.length)throw new Error("No names passed!");yield this.request("DELETE",`/cache/${this.class}/${this.id}`,e)}))}clear(){return t(this,void 0,void 0,(function*(){yield this.request("DELETE",`/cache/${this.class}/${this.id}`)}))}}export{i as default};
